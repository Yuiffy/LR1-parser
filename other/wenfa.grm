[非终结符]
<程序> <函数定义> <类型> <变量> <参数声明> <函数块> <因式> <表达式> <变量> <因子> <运算符> <声明> <赋初值> <声明闭包> <声明语句闭包> <函数块闭包> <赋值函数> <循环for> <条件语句> <函数返回> <参数列表> <参数闭包> <参数> <否则语句>
[终结符]
{ } [ ] ( ) int id digit = + - < > == != * / , string for if else return ；
[文法起始符]
<起始符>
[生成式]
    <起始符> -> <程序>;
	<程序> -> <函数定义> <程序> | <函数定义>;
    <函数定义> -> <类型> <变量> ( <参数声明> ) { <函数块> };
    <类型> -> int;
    <变量> -> id [ <表达式> ] | id;
    <因式> -> ( <表达式> ) | <变量> | digit  ;
    <表达式> -> <因子> <运算符> <表达式> | <因子>;
    <因子> -> <因式> * <因子> | <因式> / <因子> | <因式> ;
    <运算符> -> + | - | < | > | == | !=;
    <参数声明> -> <声明> <声明闭包> |;
    <声明> -> <类型> <变量> <赋初值>;
    <赋初值> -> = <表达式>  |;
    <声明闭包> -> , <声明> <声明闭包> |;
    <函数块> -> <声明语句闭包> <函数块闭包>;
    <声明语句闭包> -> <声明> ； <声明语句闭包> |;
    <函数块闭包> -> <赋值函数> ； <函数块闭包> | <循环for> <函数块闭包> | <条件语句> <函数块闭包> | <函数返回> ； <函数块闭包> |;
    <赋值函数> -> <变量> = <表达式>  | <变量> ( <参数列表> ) ;
    <参数列表> -> <参数> <参数闭包>;
    <参数闭包> -> , <参数> <参数闭包> |;
    <参数> -> id | digit | string;
    <循环for> -> for ( <赋值函数> ； <表达式> ； <赋值函数> ) { <函数块闭包> };
    <条件语句> -> if ( <表达式> ) { <函数块> } <否则语句>;
    <否则语句> -> else { <函数块> } |;
    <函数返回> -> return <表达式>;
